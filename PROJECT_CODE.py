#@Krpppp_bot
import logging
from telegram.ext import Application, MessageHandler, filters
from telegram.ext import CommandHandler
import sqlite3 as sl
import requests
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
import os
from telegram import InputFile
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler
import random
from datetime import date
from telegram.ext import JobQueue
from datetime import time
import pytz

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
con1 = sl.connect('d1.db')
cur1 = con1.cursor()
cur1.execute('''CREATE TABLE IF NOT EXISTS tl1 
              (id INTEGER PRIMARY KEY, 
               id_pol INT, 
               USD INT, 
               BTC INT, 
               ETH INT, 
               USDT INT, 
               daily INT)''')
reg_polz = []  # –°–ø–∏—Å–æ–∫ ID –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
def get_crypto_data(coin_id='bitcoin', vs_currency='usd', days=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
    params = {'vs_currency': vs_currency, 'days': days}
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        
        prices = pd.DataFrame(data['prices'], columns=['timestamp', 'price'])
        prices['date'] = pd.to_datetime(prices['timestamp'], unit='ms')
        prices.set_index('date', inplace=True)
        prices.drop('timestamp', axis=1, inplace=True)
        
        return prices
    
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def plot_and_save_crypto_chart(data, coin_name='Bitcoin', currency='USD'):
    """–°—Ç—Ä–æ–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    if data is None or data.empty:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return None
    
    plt.figure(figsize=(12, 6))
    plt.plot(data.index, data['price'], color='#2ca02c', linewidth=2, marker='o', markersize=4)
    
    plt.title(f'–ö—É—Ä—Å {coin_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(data)} –¥–Ω–µ–π', fontsize=16, pad=20)
    plt.xlabel('–î–∞—Ç–∞', fontsize=12)
    plt.ylabel(f'–¶–µ–Ω–∞ ({currency})', fontsize=12)
    plt.grid(True, linestyle='--', alpha=0.6)
    
    if not os.path.exists('crypto_charts'):
        os.makedirs('crypto_charts')
    
    timestamp = datetime.now().strftime("%Y%m%d")
    filename = f"crypto_charts/{coin_name.lower()}_{currency.lower()}_{timestamp}.png"
    
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()
    
    return filename

def get_top_cryptos(limit=5):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': limit,
        'page': 1
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return None

def valuta():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    top_cryptos = get_top_cryptos(3)
    if not top_cryptos:
        return None
    
    for crypto in top_cryptos:
        coin_id = crypto['id']
        coin_name = crypto['name']
        data = get_crypto_data(coin_id=coin_id, days=10)
        if data is not None:
            plot_and_save_crypto_chart(data, coin_name=coin_name)
            
        if top_cryptos:
            #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            for crypto in top_cryptos:
                coin_id = crypto['id']
                coin_name = crypto['name']
                symbol = crypto['symbol'].upper()
                print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {coin_name} ({symbol})...")
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π
                data = get_crypto_data(coin_id=coin_id, days=10)
                    
                # –°—Ç—Ä–æ–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                if data is not None:
                    plot_and_save_crypto_chart(data, coin_name=coin_name)
                         

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    cur1.execute("SELECT id_pol FROM tl1 WHERE id_pol = ?", (user_id,))
    existing_user = cur1.fetchone()
    
    if not existing_user:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π + 1)
        cur1.execute("SELECT MAX(id) FROM tl1")
        max_id = cur1.fetchone()[0] or 0  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
        new_id = max_id + 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        cur1.execute(
            "INSERT INTO tl1 (id, id_pol, USD, BTC, ETH, USDT, daily) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (new_id, user_id, 100000, 0, 0, 0, 0)
        )
        con1.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}")
    
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç.\n"
        "–°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫ –∂–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏—Ö (–∫–æ–Ω–µ—á–Ω–æ –∂–µ, –ø–æ–Ω–∞—Ä–æ—à–∫—É)\n"
        "–í–æ—Ç —á–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/rate_crypto - –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/daily - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)\n"
        "/grafBTC - –≥—Ä–∞—Ñ–∏–∫ –∏ –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ Bitcoin\n"
        "/grafETH - –≥—Ä–∞—Ñ–∏–∫ –∏ –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ Ethereum\n"
        "/grafUSDT - –≥—Ä–∞—Ñ–∏–∫ –∏ –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ Tether\n"
        "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–Ω–¥—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–∂–∞–≤ /help\n"
        "–£–¥–∞—á–∏!"
    )

async def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "/rate_crypto - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –∫—É—Ä—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/profile - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "/daily - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å, –æ—Ç 10000 USD –¥–æ 100000 USD)\n"
        "/top - —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–∞–ø–∏—Ç–∞–ª–æ–º\n"
        "/tap - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (–æ—Ç 1 –¥–æ 10 USD, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)\n"
        "/grafBTC - –≥—Ä–∞—Ñ–∏–∫ Bitcoin\n"
        "/grafETH - –≥—Ä–∞—Ñ–∏–∫ Ethereum\n"
        "/grafUSDT - –≥—Ä–∞—Ñ–∏–∫ Tether\n"
        "–ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É"
    )

async def profile(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user = update.effective_user
    user_id = user.id
    
    cur1.execute("SELECT USD, BTC, ETH, USDT FROM tl1 WHERE id_pol = ?", (user_id,))
    result = cur1.fetchone()
    
    if result:
        usd, btc, eth, usdt = result
        prof_text = f"""–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üë§ –ù–∏–∫: {user.mention_html()}
üíµ –î–æ–ª–ª–∞—Ä—ã: {usd} USD
‚Çø Bitcoin: {btc}
Œû Ethereum: {eth}
‚ÇÆ Tether: {usdt}"""
    else:
        prof_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
    
    await update.message.reply_html(prof_text)

async def rate_crypto(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate_crypto"""
    spis_val = []
    spis_izm = []    
    top_cryptos = get_top_cryptos(3)
    
    if top_cryptos:
        for crypto in top_cryptos:
            coin_id = crypto['id']
            data = get_crypto_data(coin_id=coin_id, days=1)
            
            if data is not None and not data.empty:
                last_price = data['price'].iloc[-1]
                first_price = data['price'].iloc[0]
                change_percent = ((last_price - first_price) / first_price) * 100
                spis_val.append(f"{last_price:.2f}")
                spis_izm.append(f"{change_percent:+.2f}%")
    
    if len(spis_val) >= 3 and len(spis_izm) >= 3:
        ratecrp_text = (
            f"üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
            f"‚Çø Bitcoin: {spis_val[0]} USD ({spis_izm[0]})\n"
            f"Œû Ethereum: {spis_val[1]} USD ({spis_izm[1]})\n"
            f"‚ÇÆ Tether: {spis_val[2]} USD ({spis_izm[2]})\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤:\n"
            f"Bitcoin: /grafBTC\n"
            f"Ethereum: /grafETH\n"
            f"Tether: /grafUSDT"
        )
    else:
        ratecrp_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await update.message.reply_text(ratecrp_text)

async def grafBTC(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grafBTC"""
    valuta()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    timestamp = datetime.now().strftime("%Y%m%d")
    filename = f"crypto_charts/bitcoin_usd_{timestamp}.png"
    
    if os.path.exists(filename):
        with open(filename, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption="üìà –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ Bitcoin (BTC) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 240 –¥–Ω–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å: /sellBTC , —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å: /buyBTC"
            )
    else:
        await update.message.reply_text("–ì—Ä–∞—Ñ–∏–∫ BTC –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def grafETH(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grafETH"""
    valuta()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    timestamp = datetime.now().strftime("%Y%m%d")
    filename = f"crypto_charts/ethereum_usd_{timestamp}.png"
    
    if os.path.exists(filename):
        with open(filename, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption="üìà –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ Ethereum (ETH) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 240 –¥–Ω–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å: /sellETH , —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å: /buyETH"
            )
    else:
        await update.message.reply_text("–ì—Ä–∞—Ñ–∏–∫ ETH –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def grafUSDT(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grafUSDT"""
    valuta()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    timestamp = datetime.now().strftime("%Y%m%d")
    filename = f"crypto_charts/tether_usd_{timestamp}.png"
    
    if os.path.exists(filename):
        with open(filename, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption="üìà –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ Tether (USDT) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 241 –¥–Ω–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å: /sellUSDT, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å: /buyUSDT"
            )
    else:
        await update.message.reply_text("–ì—Ä–∞—Ñ–∏–∫ USDT –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def get_crypto_price(coin_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    data = get_crypto_data(coin_id=coin_id, days=1)
    if data is None or data.empty:   #–≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É, –∞ –±–µ—Ä—É—Ç—Å—è —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –≤–∞–ª—é—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        if coin_id == 'BTC' or coin_id == 'btc' or coin_id == 'Bitcoin' or coin_id == 'bitcoin':
            return 103960
        elif coin_id == 'ETH' or coin_id == 'eth' or coin_id == 'Ethereum' or coin_id == 'ethereum':
            return 2508
        elif coin_id == 'USDT' or coin_id == 'usdt' or coin_id == 'Tether' or coin_id == 'tether':
            return 1        
    return data['price'].iloc[-1]

async def show_trade_options(update, context, coin_type, action):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ç–æ—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    user_id = update.effective_user.id
    coin_name = {'BTC': 'Bitcoin', 'ETH': 'Ethereum', 'USDT': 'Tether'}[coin_type]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur1.execute(f"SELECT {coin_type}, USD FROM tl1 WHERE id_pol = ?", (user_id,))
    result = cur1.fetchone()
    
    if not result:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    coin_balance, usd_balance = result
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
    current_price = await get_crypto_price(coin_type.lower())
    if current_price is None:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å {coin_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    amounts = [1, 10, 100]
    prices = {amount: amount * current_price for amount in amounts}
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton(f"1 {coin_type} - {prices[1]:.2f} USD", 
                                callback_data=f"{action}_{coin_type}_1"),
            InlineKeyboardButton(f"10 {coin_type} - {prices[10]:.2f} USD", 
                                callback_data=f"{action}_{coin_type}_10")
        ],
        [
            InlineKeyboardButton(f"100 {coin_type} - {prices[100]:.2f} USD", 
                                callback_data=f"{action}_{coin_type}_100")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if action == 'buy':
        message = (
            f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞ {coin_name}</b>\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 {coin_type} = {current_price:.2f} USD\n"
            f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {usd_balance:.2f} USD\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
        )
    else:  # sell
        if coin_balance <= 0:
            await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç {coin_name} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            return
        
        message = (
            f"üí∞ <b>–ü—Ä–æ–¥–∞–∂–∞ {coin_name}</b>\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 {coin_type} = {current_price:.2f} USD\n"
            f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {coin_balance:.8f} {coin_type}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:"
        )
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def process_trade_callback(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    action, coin_type, amount_str = query.data.split('_')
    amount = float(amount_str)
    user_id = query.from_user.id
    coin_name = {'BTC': 'Bitcoin', 'ETH': 'Ethereum', 'USDT': 'Tether'}[coin_type]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
    current_price = await get_crypto_price(coin_type.lower())
    if current_price is None:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    total = amount * current_price
    
    if action == 'buy':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USD
        cur1.execute("SELECT USD FROM tl1 WHERE id_pol = ?", (user_id,))
        usd_balance = cur1.fetchone()[0]
        
        if usd_balance < total:
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                f"–ù—É–∂–Ω–æ: {total:.2f} USD\n"
                f"–£ –≤–∞—Å: {usd_balance:.2f} USD",
                parse_mode='HTML'
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        cur1.execute(
            f"UPDATE tl1 SET USD = USD - ?, {coin_type} = {coin_type} + ? WHERE id_pol = ?",
            (total, amount, user_id)
        )
        con1.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        cur1.execute(f"SELECT USD, {coin_type} FROM tl1 WHERE id_pol = ?", (user_id,))
        new_usd, new_coin = cur1.fetchone()
        
        await query.edit_message_text(
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!</b>\n\n"
            f"–í—ã –∫—É–ø–∏–ª–∏ {amount:.8f} {coin_type} –∑–∞ {total:.2f} USD\n"
            f"–ü–æ –∫—É—Ä—Å—É: 1 {coin_type} = {current_price:.2f} USD\n\n"
            f"üíº <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b>\n"
            f"USD: {new_usd:.2f}\n"
            f"{coin_type}: {new_coin:.8f}",
            parse_mode='HTML'
        )
    else:  # sell
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        cur1.execute(f"SELECT {coin_type} FROM tl1 WHERE id_pol = ?", (user_id,))
        coin_balance = cur1.fetchone()[0]
        
        if coin_balance < amount:
            await query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {coin_type}!\n\n"
                f"–ü—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–¥–∞—Ç—å: {amount:.8f}\n"
                f"–£ –≤–∞—Å: {coin_balance:.8f}",
                parse_mode='HTML'
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        cur1.execute(
            f"UPDATE tl1 SET USD = USD + ?, {coin_type} = {coin_type} - ? WHERE id_pol = ?",
            (total, amount, user_id)
        )
        con1.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        cur1.execute(f"SELECT USD, {coin_type} FROM tl1 WHERE id_pol = ?", (user_id,))
        new_usd, new_coin = cur1.fetchone()
        
        await query.edit_message_text(
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞!</b>\n\n"
            f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {amount:.8f} {coin_type} –∑–∞ {total:.2f} USD\n"
            f"–ü–æ –∫—É—Ä—Å—É: 1 {coin_type} = {current_price:.2f} USD\n\n"
            f"üíº <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b>\n"
            f"USD: {new_usd:.2f}\n"
            f"{coin_type}: {new_coin:.8f}",
            parse_mode='HTML')
        
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è BTC
async def buyBTC(update, context):
    await show_trade_options(update, context, 'BTC', 'buy')

async def sellBTC(update, context):
    await show_trade_options(update, context, 'BTC', 'sell')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è ETH
async def buyETH(update, context):
    await show_trade_options(update, context, 'ETH', 'buy')

async def sellETH(update, context):
    await show_trade_options(update, context, 'ETH', 'sell')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è USDT
async def buyUSDT(update, context):
    await show_trade_options(update, context, 'USDT', 'buy')

async def sellUSDT(update, context):
    await show_trade_options(update, context, 'USDT', 'sell')

async def daily(update, context):
    #–í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. 1 —Ä–∞–∑ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å, –≤—ã–¥–∞–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ USD –≤ —Ä–∞–∑–º–µ—Ä–µ –æ—Ç 10000 –¥–æ 100000 –µ–¥–∏–Ω–∏—Ü
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur1.execute("SELECT id_pol, daily FROM tl1 WHERE id_pol = ?", (user_id,))
    result = cur1.fetchone()
    
    if not result:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    last_daily_date = result[1] if result[1] else None
    today = date.today().isoformat()
    
    if last_daily_date == today:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –æ—Ç 10000 –¥–æ 100000
    reward = random.randint(10000, 100000)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥—ã
    cur1.execute(
        "UPDATE tl1 SET USD = USD + ?, daily = ? WHERE id_pol = ?",
        (reward, today, user_id)
    )
    con1.commit()
    
    await update.message.reply_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É: {reward} USD!\n"
        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /profile"
    )
    
async def top(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–ø–∏—Ç–∞–ª—É"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur1.execute("SELECT id_pol, USD, BTC, ETH, USDT FROM tl1")
    users = cur1.fetchall()
    
    if not users:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_capitals = []
    for user_id, usd, btc, eth, usdt in users:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        btc_price = await get_crypto_price('bitcoin')
        eth_price = await get_crypto_price('ethereum')
        usdt_price = await get_crypto_price('tether')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª
        total = usd + (btc * btc_price) + (eth * eth_price) + (usdt * usdt_price)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = await context.bot.get_chat(user_id)
            username = user.username or user.first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        except:
            username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        user_capitals.append((username, total))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞–ø–∏—Ç–∞–ª—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    user_capitals.sort(key=lambda x: x[1], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5
    top_message = "üèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–ø–∏—Ç–∞–ª—É:\n\n"
    for i, (username, capital) in enumerate(user_capitals[:5], 1):
        top_message += f"{i}. {username}: {capital:.2f} USD\n"
    
    await update.message.reply_text(top_message)

async def tap(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tap - –¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –æ—Ç 1 –¥–æ 10 USD"""
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur1.execute("SELECT id_pol FROM tl1 WHERE id_pol = ?", (user_id,))
    result = cur1.fetchone()
    
    if not result:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –æ—Ç 1 –¥–æ 10 USD
    reward = random.randint(1, 10)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    cur1.execute(
        "UPDATE tl1 SET USD = USD + ? WHERE id_pol = ?",
        (reward, user_id)
    )
    con1.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    cur1.execute("SELECT USD FROM tl1 WHERE id_pol = ?", (user_id,))
    new_balance = cur1.fetchone()[0]
    
    await update.message.reply_text(
        f"üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} USD!\n"
        f"üíº –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} USD\n\n"
        f"–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /tap —Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥—ã!"
    )

async def send_daily_notification(context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur1.execute("SELECT id_pol FROM tl1")
        users = cur1.fetchall()
        
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user in users:
            user_id = user[0]
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –∫–æ–º–∞–Ω–¥–æ–π /daily"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_notification: {e}")

def main():
    try:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        application = Application.builder().token("8089456213:AAE_3m8vGHEgaULjvaWQRbBgCJMDUsK7LmE").build()
    
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 8:00
        job_queue = application.job_queue
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ (8:00 –ø–æ –ú–æ—Å–∫–≤–µ)
        moscow_time = time(8, 0, tzinfo=pytz.timezone('Europe/Moscow'))
        job_queue.run_daily(send_daily_notification, time=moscow_time)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("profile", profile))
        application.add_handler(CommandHandler("rate_crypto", rate_crypto))
        application.add_handler(CommandHandler("grafBTC", grafBTC))
        application.add_handler(CommandHandler("grafETH", grafETH))
        application.add_handler(CommandHandler("grafUSDT", grafUSDT))
        application.add_handler(CommandHandler("daily", daily))
        application.add_handler(CommandHandler("top", top))
        application.add_handler(CommandHandler("tap", tap))
    
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        application.add_handler(CommandHandler("buyBTC", buyBTC))
        application.add_handler(CommandHandler("sellBTC", sellBTC))
        application.add_handler(CommandHandler("buyETH", buyETH))
        application.add_handler(CommandHandler("sellETH", sellETH))
        application.add_handler(CommandHandler("buyUSDT", buyUSDT))
        application.add_handler(CommandHandler("sellUSDT", sellUSDT))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(process_trade_callback))
    
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    finally:
        con1.close()
        
if __name__ == '__main__':
    main()